h2 楕円曲線の理論
p 本章では楕円曲線とその上で定義される演算について説明する．


h3#c2s1 楕円曲線
p
	| ある有限体\(\mathbb{F}\)の上で次のような方程式\(EC\)を定義しよう．\[EC: y^2 = x^3 + Ax + B\]
	| ここで\(A,B\)は定数であり，\(x\)と\(y\)は\(\mathbb{F}\)の要素である．このとき，方程式\(EC\)を満たすような全ての点\((x,y)\)と，後述する特殊な点\(\mathcal{O}\)（無限遠点）の集合を楕円曲線と呼ぶ.特に暗号理論においては\(\mathbb{Z}_p\)上で楕円曲線を扱うため，楕円曲線\(E(\mathbb{Z}_p)\)を次のように定義することができる．\[E(\mathbb{Z}_{p})=\{(x,y)|x,y \in \mathbb{Z}_{p} \cap y^2=x^3+Ax+B \mod p\} \cup \{\mathcal{O}\}\]
	| イメージが掴みにくいと思うので，ここで楕円曲線がどのような形かを見てみよう．方程式\(EC\)の解が描く曲線は，\(A,B\)の値によって図1のように，大きく分けて３種類の特徴的な曲線になる．
	figure
		img(src="assets/elliptic/ec1.png")
		img(src="assets/elliptic/ec2.png")
		img(src="assets/elliptic/ec3.png")
		figcaption 左から\((A,B)=(-11.9, 16), (-12, 16), (-13, 16)\)の楕円曲線
	| この曲線上の点に対して演算を定義することで，暗号に応用できるような実用的な巡回群を形成する．本章では楕円曲線上での演算について説明するが，その前に楕円曲線に関して本節でいくらか議論しておこう．
p
	| まず，素数\(p\)（体の標数）は\(p \geq 5\)である．\(p=2\)や\(p=3\)の場合も理論は成立するが，より複雑な説明が必要となるため，本稿では\(p \geq 5\)を想定して書くことにする．
p
	| 次に，\(A,B \in \mathbb{Z}_p\)は任意の定数であるが，\(x^3+Ax+B=0 \mod p\)が重解を持たないことが実用上要求される．では，そのためにはどのような条件が必要だろうか．関数\(y(x)=x^3+Ax+B\)について考えてみよう．これは3次関数なので，\(y(x)=0\)が重解を持つときは2つの解しか持たない．すなわち，重解を持つときは図2のように，\(x\)軸上で極値を取ることになる．これは元の楕円曲線についても同じことが言えるので，楕円曲線が極値を取る点で\(y(x)=0\)でなければ良い．特に，図1の楕円曲線の形から分かるように，\(y\)軸より左側の膨らみを持つ部分で極大を取り，その点では\(x\)軸に接することはないので，極小を取る点について調べれば良い．
	figure
		img(src="assets/elliptic/curve.png")
		figcaption \(x=1\)で重解を持つ3次関数の例
	| そこで，\[y=x^3+Ax+B\]
	| の両辺を\(x\)で微分すると，\[y'=3x^2+A\]
	| となるが，これが0になれば極値であったので，\(3x^2+A=0\)より\(x_{0}=\pm \sqrt{-\cfrac{A}{3}}\)となる．さらに，\[y''=6x\]
	| にこれを代入すると，\(x_{0}=\sqrt{-\cfrac{A}{3}}\)で\(y''>0\)，すなわち極小を取ることが分かる．（\(x_0\)が虚数になっていると思う方もいるかもしれないが，重解を持つ条件を調べているのでそのようなことを心配する必要はない．）この\(x_0\)を代入して\(y(x_0)=0\)となる条件を調べると，\(4A^3+27B^2=0\)が得られる．したがって，\(4A^3+27B^2=0 \mod p\)を満たすような\(A,B\)の組を選べば実用上問題無いと言えるだろう．
p
	| さて，\(y^2 = x^3+Ax+B \mod p\)を満たすような整数\(x,y \in \mathbb{Z}_{p}\)の組\((x,y)\)はどのくらい存在するのであろうか．方程式が整数解を持つと聞くと，制約が強いと感じる方もいるかもしれない．しかし，楕円曲線では\(p\)で剰余を取っていることに着目すると，実際は実用上問題無いほど多くの点でこの方程式が成立する．
	| 証明は省略するが，楕円曲線のHasseの定理によると，\(E(\mathbb{Z}_{p})\)の位数\(\#E(\mathbb{Z}_{p})\)は次の不等式を満たす．
	span.footnote 暗号で使われるような巨大な標数の有限体上の楕円曲線において，正確に位数を求めることは難しい．現在はSchoof-Elkies-Atkin法が広く使われている．
	| \[p+1-2\sqrt{p} \leq \#E(\mathbb{Z}_{p}) \leq p+1+2\sqrt{p}\]
	| 例えば\(p=107\)のとき，Hasseの定理に従うと，方程式を満たす点は88個以上128個以下存在することになる．このように，楕円曲線上の点は実用上問題無いほど多く存在する．実際に楕円曲線上で適当な点を見つけるときも，\(x \in \mathbb{Z}_p\)を乱数で生成し，それにより計算した\(x^3+Ax+B\)が\(p\)の平方剰余であるかを判別する方法が使われる．（平方剰余であるかの判別には第1章で説明したLegendre記号を使う．）

h3#c2s2 楕円曲線上での加算
p
	| 楕円曲線暗号において最も重要な演算が加算である．楕円曲線上では，ある点とある点の加算が定義され，その和は同じ楕円曲線上の別の点に移ることになっている．（すなわち演算は閉じている．）楕円曲線\(E(\mathbb{Z}_p)\)上に（無限遠点でない）点\(P,Q\)があったとする．このとき，\(R=P+Q\)は，
p(style="text-align:center") 「\(P\)と\(Q\)を結ぶ直線と楕円曲線が交わる点を\(x\)軸対称に反転した点」
p
	| として定義される．言葉ではややこしいので，加算を表した図を図3に示す．
	figure
		img(src="assets/elliptic/add1.png")
		figcaption 楕円曲線上の加算\(R=P+Q\)
	| やや複雑な定義に見えるが，単純に図の\(R'\)の部分を和と定義してしまうと\(R'+Q=P\)となってしまい都合が悪い，と考えると反転操作が必要なことが納得いくだろう．また，反転操作はマイナスを掛けたことにし，\(R'=-R\)のように表す．こうすれば\(R=P+Q\)に対して\(R'+Q=(-R)+Q=(-P)\)となり，我々の慣れ親しんだ加減算と同様に扱うことができる．この定義により楕円曲線上の加算は結合法則を満たす．すなわち，\(P+(Q+R)=(P+Q)+R\)が成立する．さらに，加算は交換法則を満たす．（\(P+Q\)も\(Q+P\)も同じ\(R'\)を貫く．）したがって，楕円曲線はアーベル群（交換法則を満たす群）である．
p
	| では，加算を作図ではなく数式で定義してみよう．\(P(x_1,y_1),Q(x_2,y_2)\)としたとき，\(R(x_3,y_3)\)を求める．ただし，\(P \neq Q\)である．（\(P+P=2P\)の求め方は次節以降で説明する．）まず，\(P\)と\(Q\)を結ぶ直線\(\ell\)の傾きを\(m\)とすると，\[m=\cfrac{y_2-y_1}{x_2-x_1} \mod p\]
	| となる．これは一般的な傾きを求める式であるが，ここでの除算は逆元の乗算であることには注意されたい．\(P \neq Q\)としたことにより\((x_2-x_1)\)は逆元を持つのである．直線\(\ell\)の方程式は\[y=m(x - x_1) + y_1 \mod p\]
	| と表せるので，これが楕円曲線\(y^2=x^3+Ax+B \mod p\)と交わる点を求めればよい．
	| すなわち，\[(m(x-x_1)+y_1)^2=x^3+Ax+B \mod p\]
	| を満たせばよい．展開して整理すると，\[x^{3}-m^{2}x^{2}+(A-2my_{1}+2m^{2}x_{1})x + (B-y_{1}^{2}+2mx_{1}y_{1}-m^{2}x_{1}^{2})=0 \mod p\]
	| これを\(x\)について解くのは難しいと思うかもしれない．しかし，\(x=x_1, x=x_2\)はこの方程式を満足するという事実を知っているので，因数定理
	span.footnote 多項式\(P(x)\)が\((x-a)\)で割り切れる必要十分条件は\(P(a)=0\)となる．
	| より左辺が\((x-x_1)\)や\((x-x_2)\)で割り切れるということが分かる．したがって，左辺は\[x^{3}-m^{2}x^{2}+\cdots = (x-x_1)(x-x_2)(x-x_3)\]
	| と因数分解できる．右辺を展開すると，\[x^{3}-m^{2}x^{2}+\cdots=x^3-(x_1+x_2+x_3)x^2+\cdots\]
	| なので，係数を比較すれば\[-m^2=-(x_1+x_2+x_3)\]
	| が得られる．したがって，\(R\)の\(x\)座標は\[x_3=m^2-x_1-x_2 \mod p\]
	| で与えられることが分かった．\(y\)座標はこれを直線\(\ell\)の方程式に当てはめて，\(x\)軸に対称に反転すればよい（マイナスを掛ける）ので，\[y_3=-[m(x_3-x_1)+y_1] \mod p\]
	| で与えられる．これらの計算により，\(P(x_1,y_1)+Q(x_2,y_2)\)が\[P(x_1,y_1)+Q(x_2,y_2)=R([m^{2}-x_{1}-x_{2} \mod p], [m(x_{1}-x_{3})-y_1 \mod p])\]
	| に移ることが分かった．ただし，最初に定義した通り，この式は\(P \neq Q\)かつ\(P,Q \neq \mathcal{O}\)の場合に限ることに注意されたい．\(P=Q\)や\(P=\mathcal{O}\)などの場合については次節以降で説明する．ソースコード上で楕円曲線上の加算は，
	code Point
	| クラスの特殊メソッド
	span.footnote Pythonではクラスに__add__や__mul__といった特殊な名前のメソッドを定義することで，そのクラスのインスタンスに対する演算の振る舞いを定義することができる．
	code __add__
	| に定義されている．

	
h3#c2s3 無限遠点の定義
p
	| ここまでにも何度か記号だけ現れたが，楕円曲線においては無限遠点と呼ばれる特殊な点\(\mathcal{O}\)が定義されている．これは楕円曲線上で単位元として振る舞う点で，後述する加算やスカラー倍の演算で重要になってくる．単位元なので，楕円曲線上の点\(P\)に対して次のような性質が成り立つ．
	ol
		li \(P+(-P)=\mathcal{O}\)
		li \(P+\mathcal{O}=\mathcal{O}+P=P\)
	| 前節で加算を作図したときのことを思い出して，無限遠点が楕円曲線上のどの辺りに存在するのかを見てみよう．1.を使うと，\(\mathcal{O}\)は点\(P\)と点\((-P)\)を結ぶ直線が楕円曲線と交わる点に存在する．しかし，\(P\)と\((-P)\)を結ぶ直線は\(x\)軸に垂直で，楕円曲線とは交わらない．また，その\(x\)座標は\(P\)の\(x\)座標によって異なるように思える．このように，無限遠点は単位元（零元）として振る舞う重要な性質を持つ特殊な点なのである．さらに，楕円曲線の位数を\(n\)をしたとき，後述するスカラー倍により\[\mathcal{O}=nP\]
	| と表される．ソースコードでは無限遠点を\((-1,-1)\)として，
	code EllipticCurve
	| クラス内で定義している．
	span.footnote 本稿で説明する楕円曲線上の点はAffine座標系を使っているが，実際にはProjective座標系など，計算が高速になる座標系が用いられる．例えばProjective座標系では無限遠点は\((0,1,0)\)で表すことができる．しかし本稿ではプログラムの内部でも，\((x,y)\)表記でおなじみのAffine座標系を用いる．


h3#c2s4 楕円曲線上でのスカラー倍
p
	| 楕円曲線上における加法をここまでに説明したが，スカラー倍はどう定義されるのだろうか．まず，\(P+P=2P\)は図4のように点\(P\)における接線と楕円曲線との交点の\(x\)軸対称な点を表す．
	figure
		img(src="assets/elliptic/add2.png")
		figcaption 楕円曲線上のスカラー倍\(2P=P+P\)
	| 加算と同じような定義だが，２点を結ぶ直線の代わりに１点における接線となっている．また，この定義により\(2P+(-P)=P\)となっていることにも注目してほしい．
p
	| まずは，ある点の2倍を数式で定義してみよう．\(\mathbb{Z}_p\)上の楕円曲線の方程式\[y^2=x^3+Ax+B \mod p\]
	| の両辺を\(x\)で微分すると，\[2yy'=3x^2+A \mod p\]
	| と表される．（ただし，\(P \neq \mathcal{O}, y_1 \neq 0\)である．
	span.footnote 楕円曲線上で\(y\)座標が0であるような点を二等分点と呼び，重要な点ではあるが，楕円曲線を最低限実装する上では使わないので本稿では説明しない．
	| ）したがって，接線の方程式は\[y=m(x-x_1)+y_1 \mod p\]
	| となり，これと楕円曲線の接点を求めるには\[(m(x-x_1)+y_1)^2 = x^3+Ax+B \mod p\]
	| を解けばよく，これを展開して整理すると，\[x^3-m^{2}x^{2}+(A-2my_{1}+2m^{2}x_{1})x+(B-y_{1}^{2}+2mx_{1}y_{1}-m^{2}x_{1}^{2})=0\mod p\]
	| が現れる．加法の時と同じく，\(x=x_1\)が重解であるという事実を利用して，左辺を\((x-x_1)^2\)でくくると，\[(x-x_1)^{2}(x+(2x_{1}-m^2))=0\mod p\]
	| が得られる．したがって，\(2P\)の\(x\)座標は\(x=m^{2}-2x_{1} \mod p\)である．これを接線の方程式に代入して\(x\)軸対称に反転すれば\(y\)座標が得られ，\[P(x_1,y_1)+P(x_1,y_1)=2P([m^{2}-2x_{1} \mod p], [m(x_{1}-x_{2})-y_{1} \mod p])\]
	| であることが分かる．これにより，\(2P\)を式で表すことができた．また，定義より無限遠点に対しては\[2\mathcal{O}=\mathcal{O}\]
	| である．
p
	| 点\(P\)を2倍することはできたが，一般の正数\(n\)に対して\(nP\)はどう計算されるのだろうか．直感的には\[nP=P+P+P+\cdots+P\]
	| と\(n\)回の加算なので，\(2P\)を計算した後に単純に\(n-1\)回\(P\)を加算すれば良さそうだ．しかし，暗号で使われる楕円曲線は大きな位数を持つため，\(n\)が非常に大きい数である場合が多く，コンピュータでこれを計算すると時間がかかってしまう．計算を高速化する方法はいくらか存在するが，ここでは分かりやすくて実用的な二進展開法（double-and-add）を説明する．点\(P\)を\(n\)倍することを考えよう．\(n\)を二進数で表記したとき，下位ビットから順に\(n_0,n_1,n_2,\cdots,n_m\)とおく．すなわち\[n=n_{0} \cdot 2^{0} + n_{1} \cdot 2^{1} + n_{2} \cdot 2^{2} + \cdots + n_{m} \cdot 2^{m}\]
	| と表す．これを使えば，\[nP=n_{0} \cdot 2^{0}P + n_{1} \cdot 2^{1}P + n_{2} \cdot 2^{2}P + \cdots + n_{m} \cdot 2^{m}P\]
	| と書ける．例えば\(100P\)を計算するとき，\((n_0,n_1,\cdots,n_6)=(0,0,1,0,0,1,1)\)なので，\[100P=2^{2}P+2^{5}P+2^{6}P\]
	| である．すると，右辺の第１項から第３項までは，それぞれ2,5,6回の2倍操作を表すので，合計13回の2倍操作と2回の加算にすることができた．さらに変形すると，\[100P=2^{2}(P+2^{3}(P+2^{1}P))\]
	| となる．これは合計６回の2倍操作と2回の加算となり，より計算量が小さくなった．これを利用して，ソースコード中では
	code Point
	| クラスの
	code __mul__
	| メソッドにスカラー倍の演算を定義している．
