h2 SATソルバの利用
p ここではオープンソースなSATソルバ「MiniSat」を用いて, 簡単な例とともにSATソルバの利用方法を紹介します.
p MiniSatがインストールされているものとします. インストールは各自行ってください.
p SATソルバでは基本的に連語標準形で論理式を渡します. (前の章で例に出したような形です) ほとんどのSATソルバがDIMACSフォーマットを採用しています.
p
  | 実際に例を出してみます. 次のような連語標準形の論理式があったとします.
  :math
    \[
      (x_1 \lor x_2) \land (x_1 \lor \lnot x_2) \land (x_3 \lor x_4) \land (\lnot x_3 \lor \lnot x_4) \land (x_1 \lor \lnot x_3) \land (\lnot x_2 \lor \lnot x_4)
    \]
  | これをDIMACSフォーマットに書き直すと以下のようになります.
  :code
    c comment
    p cnf 4 6
    1 2 0
    1 -2 0
    3 4 0
    -3 -4 0
    1 -3 0
    -2 -4 0
  | c の行はコメントです. p の行は「p cnf <変数の数> <選言節の数>」と書きます. 以下の行では, 行ごとに節を表し, 0は節の区切り, マイナスでnotを意味するようになっています. DIMACSフォーマットではこのように連語標準形を表します.
p
  | ではこれをtest.cnfとして保存し, 実際にMiniSatを動かしてみます.
  :code
    $ cat test.cnf
    c comment
    p cnf 4 6
    1 2 0
    1 -2 0
    3 4 0
    -3 -4 0
    1 -3 0
    -2 -4 0
    $ minisat test.cnf result.txt
    ============================[ Problem Statistics ]=============================
    |                                                                             |
    |  Number of variables:             4                                         |
    |  Number of clauses:               6                                         |
    |  Parse time:                   0.00 s                                       |
    |  Eliminated clauses:           0.00 Mb                                      |
    |  Simplification time:          0.00 s                                       |
    |                                                                             |
    ============================[ Search Statistics ]==============================
    | Conflicts |          ORIGINAL         |          LEARNT          | Progress |
    |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |
    ===============================================================================
    ===============================================================================
    restarts              : 1
    conflicts             : 0              (0 /sec)
    decisions             : 1              (0.00 % random) (664 /sec)
    propagations          : 1              (664 /sec)
    conflict literals     : 0              ( nan % deleted)
    Memory used           : 0.17 MB
    CPU time              : 0.001507 s
    
    SATISFIABLE
    $ cat result.txt
    SAT
    1 -2 3 -4 0
    bash-3.2$

  | 標準出力にSATISFIABLEと表示されました. これは与えられた論理式が充足可能であることを示します. また, result.txtには"1 -2 3 -4 0"と書かれています. これは充足可能な割当てを示しています. DIMACSフォーマットに従って, それぞれの数字はそれぞれの変数と対応し, マイナスはnotと表します. 即ち
  :inmath
    \(
      (x_1,x_2,x_3,x_4)=(T,F,T,F)
    \)
  | を表します. これは1章でも確認したように確かに例の論理式を充足させる割当てになっています.
p この文章では, MiniSatの利用はここまでしか扱いません. 以降はどのようにSATソルバを実装するのかというところに興味を移していきます.
